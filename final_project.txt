--Part 1: Yelp Dataset Profiling and Understanding
--1. Profile the data by finding the total number of records for each of the tables below:
--i. Attribute table =10000
SELECT COUNT(*)
FROM attribute
--ii. Business table =10000
SELECT COUNT(*)
FROM business
--iii. Category table =10000
SELECT COUNT(*)
FROM category
--iv. Checkin table =10000
SELECT COUNT(*)
FROM checkin
--v. elite_years table =10000
SELECT COUNT(*)
FROM elite_years
--vi. friend table =10000
SELECT COUNT(*)
FROM friend
--vii. hours table =10000
SELECT COUNT(*)
FROM hours
--viii. photo table =10000
SELECT COUNT(*)
FROM photo
--ix. review table = 10000
SELECT COUNT(*)
FROM review
--x. tip table = 10000
SELECT COUNT(*)
FROM tip
--xi. user table =10000
SELECT COUNT(*)
FROM user

--2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.
--i. Business =10000
SELECT COUNT(DISTINCT id)
FROM business
--ii. Hours =1562
SELECT COUNT(DISTINCT business_id)
FROM hours
--iii. Category =2643
SELECT COUNT(DISTINCT business_id)
FROM category
--iv. Attribute =1115
SELECT COUNT(DISTINCT business_id)
FROM attribute
--v. Review = 10000
SELECT COUNT(DISTINCT id)
FROM review
--vi. Checkin = 493
SELECT COUNT(DISTINCT business_id)
FROM checkin
--vii. Photo =10000
SELECT COUNT(DISTINCT id)
FROM photo
--viii. Tip =
--user_id:537
SELECT COUNT(DISTINCT user_id)
FROM tip
--business_id=3979
SELECT COUNT(DISTINCT business_id)
FROM tip
--ix. User = 10000
SELECT COUNT(DISTINCT id)
FROM user
--x. Friend =11
SELECT COUNT(DISTINCT user_id)
FROM friend
--xi. Elite_years =2780
SELECT COUNT(DISTINCT user_id)
FROM elite_years

--3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

--Answer: No

--SQL code used to arrive at answer:
SELECT *
FROM user
WHERE id IS NULL OR
name IS NULL
OR review_count IS NULL
OR yelping_since IS NULL
OR useful IS NULL
OR funny IS NULL
OR cool IS NULL
OR fans IS NULL
OR average_stars IS NULL
OR compliment_hot IS NULL
OR compliment_more IS NULL
OR compliment_profile IS NULL
OR compliment_cute IS NULL
OR compliment_list IS NULL
OR compliment_note IS NULL
OR compliment_plain IS NULL
OR compliment_cool IS NULL
OR compliment_funny IS NULL
OR compliment_writer IS NULL
OR compliment_photos IS NULL
--4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

--i. Table: Review, Column: Stars

--min:1		max:5		avg:3.7082
SELECT MIN(stars),
       MAX(stars),
       AVG(stars)
FROM review


--ii. Table: Business, Column: Stars

--min:1		max:5	 avg:3.6549
SELECT MIN(stars),
       MAX(stars),
       AVG(stars)
FROM business


--iii. Table: Tip, Column: Likes

--min:0		max:2		avg:0.0144
SELECT MIN(likes),
       MAX(likes),
       AVG(likes)
FROM tip


--iv. Table: Checkin, Column: Count

--min:1		max:53		avg:1.9414
SELECT MIN(count),
       MAX(count),
       AVG(count)
FROM checkin
--v. Table: User, Column: Review_count

--min:0		max:2000		avg:24.2995
SELECT MIN(review_count),
       MAX(review_count),
       AVG(review_count)
FROM user
--5. List the cities with the most reviews in descending order:


--SQL code used to arrive at answer:
SELECT b.city,
       COUNT(city)
FROM  review r LEFT JOIN business b
ON b.id=r.business_id
GROUP BY city
ORDER BY COUNT(city) DESC

--Copy and Paste the Result Below:
city            | COUNT(city) |
+-----------------+-------------+
| Las Vegas       |         193 |
| Phoenix         |          65 |
| Toronto         |          51 |
| Scottsdale      |          37 |
| Henderson       |          30 |
| Tempe           |          28 |
| Pittsburgh      |          23 |
| Chandler        |          22 |
| Charlotte       |          21 |
| Montréal        |          18 |
| Madison         |          16 |
| Gilbert         |          13 |
| Mesa            |          13 |
| Cleveland       |          12 |
| North Las Vegas |           6 |
| Edinburgh       |           5 |
| Glendale        |           5 |
| Lakewood        |           5 |
| Cave Creek      |           4 |
| Champaign       |           4 |
| Markham         |           4 |
| North York      |           4 |
| Mississauga     |           3 |
| Surprise        |           3 |
| Avondale        |           2 |
--6. Find the distribution of star ratings to the business in the following cities:

--i. Avon

--SQL code used to arrive at answer:
SELECT stars,
       sum(review_count) as count
FROM business b
WHERE city="Avon"
GROUP BY stars
ORDER BY stars
--Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |    10 |
|   2.5 |     6 |
|   3.5 |    88 |
|   4.0 |    21 |
|   4.5 |    31 |
|   5.0 |     3 |
+-------+-------+
--ii. Beachwood

--SQL code used to arrive at answer:
SELECT stars,
       sum(review_count) as count
FROM business b
WHERE city="Beachwood"
GROUP BY stars
ORDER BY stars
--Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     8 |
|   2.5 |     3 |
|   3.0 |    11 |
|   3.5 |     6 |
|   4.0 |    69 |
|   4.5 |    17 |
|   5.0 |    23 |
+-------+-------+

7. Find the top 3 users based on their total number of reviews:

SQL code used to arrive at answer:
SELECT name
FROM user
ORDER BY review_count DESC
LIMIT 3

Copy and Paste the Result Below:
+--------+
| name   |
+--------+
| Gerald |
| Sara   |
| Yuri   |
+--------+

--8. Does posing more reviews correlate with more fans?

--Please explain your findings and interpretation of the results:
SELECT review_count,
       fans,
       fans/(review_count/100) AS fans_per_100review
FROM user
ORDER BY review_count DESC

--Results:
+--------------+------+--------------------+
| review_count | fans | fans_per_100review |
+--------------+------+--------------------+
|         2000 |  253 |                 12 |
|         1629 |   50 |                  3 |
|         1339 |   76 |                  5 |
|         1246 |  101 |                  8 |
|         1215 |  126 |                 10 |
|         1153 |  311 |                 28 |
|         1116 |   16 |                  1 |
|         1039 |  104 |                 10 |
|          968 |  497 |                 55 |
|          930 |  173 |                 19 |
|          904 |   38 |                  4 |
|          864 |   43 |                  5 |
|          862 |  124 |                 15 |
|          861 |  115 |                 14 |
|          842 |   85 |                 10 |
|          836 |   37 |                  4 |
|          834 |  120 |                 15 |
|          813 |  159 |                 19 |
|          775 |   61 |                  8 |
|          754 |   78 |                 11 |
|          702 |   35 |                  5 |
|          696 |   10 |                  1 |
|          694 |  101 |                 16 |
|          676 |   25 |                  4 |
|          675 |   45 |                  7 |
+--------------+------+--------------------+
--As shown in the diagram, there is no clear relationship between fans and review count.
--Number of fans may be related to other facotrs such as quality of reviews.

--9. Are there more reviews with the word "love" or with the word "hate" in them?

--Answer:
--There are more "love"(1780) in comparison to "hate"(232).
+-------+
| count |
+-------+
|   232 |
|  1780 |
+-------+


--SQL code used to arrive at answer:
SELECT COUNT(text) as count
FROM review
WHERE text like "%hate%"
UNION
SELECT COUNT(text)
FROM review
WHERE text like "%love%"

--10. Find the top 10 users with the most fans:

--SQL code used to arrive at answer:
SELECT name,
       COUNT(fans) as num_of_fans
FROM user
GROUP BY fans
ORDER BY num_of_fans DESC
LIMIT 10


--Copy and Paste the Result Below:
+------------+-------------+
| name       | num_of_fans |
+------------+-------------+
| Ryan       |        7707 |
| Michael    |        1084 |
| Erik       |         360 |
| Tina       |         197 |
| trevor     |         112 |
| Cynthia    |          71 |
| Simon      |          64 |
| Chauntelle |          37 |
| Andrew     |          33 |
| Nina       |          32 |
+------------+-------------+

Part 2: Inferences and Analysis

--1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

--i. Do the two groups you chose to analyze have a different distribution of hours?
--I pick Food category from Toronto.
--I found restaurants whoose stars_category is between 2-3 tends to open earlier in the morning.
+--------------+----------+-----------------------+----------------+
| name         | category | hours                 | stars_category |
+--------------+----------+-----------------------+----------------+
| Loblaws      | Food     | Monday|8:00-22:00     | 2-3            |
| Loblaws      | Food     | Tuesday|8:00-22:00    | 2-3            |
| Loblaws      | Food     | Friday|8:00-22:00     | 2-3            |
| Loblaws      | Food     | Wednesday|8:00-22:00  | 2-3            |
| Loblaws      | Food     | Thursday|8:00-22:00   | 2-3            |
| Loblaws      | Food     | Sunday|8:00-22:00     | 2-3            |
| Loblaws      | Food     | Saturday|8:00-22:00   | 2-3            |
| Cabin Fever  | Food     | Monday|16:00-2:00     | 4-5            |
| Cabin Fever  | Food     | Tuesday|18:00-2:00    | 4-5            |
| Cabin Fever  | Food     | Friday|18:00-2:00     | 4-5            |
| Cabin Fever  | Food     | Wednesday|18:00-2:00  | 4-5            |
| Cabin Fever  | Food     | Thursday|18:00-2:00   | 4-5            |
| Cabin Fever  | Food     | Sunday|16:00-2:00     | 4-5            |
| Cabin Fever  | Food     | Saturday|16:00-2:00   | 4-5            |
| Halo Brewery | Food     | Tuesday|15:00-21:00   | 4-5            |
| Halo Brewery | Food     | Friday|15:00-21:00    | 4-5            |
| Halo Brewery | Food     | Wednesday|15:00-21:00 | 4-5            |
| Halo Brewery | Food     | Thursday|15:00-21:00  | 4-5            |
| Halo Brewery | Food     | Sunday|11:00-21:00    | 4-5            |
| Halo Brewery | Food     | Saturday|11:00-21:00  | 4-5            |
+--------------+----------+-----------------------+----------------+
SELECT b.name,
       c.category,
       h.hours,
       CASE
       WHEN stars<=3 and stars>=2 THEN "2-3"
       WHEN stars<=5 and stars>=4 THEN "4-5"
       ELSE "others"
       END stars_category
FROM business b
JOIN hours h
ON b.id=h.business_id
JOIN category c
ON b.id=c.business_id
WHERE city="Toronto" and category="Food"
ORDER BY stars_category

--ii. Do the two groups you chose to analyze have a different number of reviews?
--Companies in higher satrs_category tend to have higher number of reviews.
+--------------------+----------+--------------+----------------+
| name               | category | review_count | stars_category |
+--------------------+----------+--------------+----------------+
| Loblaws            | Food     |           10 | 2-3            |
| Cabin Fever        | Food     |           26 | 4-5            |
| Halo Brewery       | Food     |           15 | 4-5            |
| The Kosher Gourmet | Food     |            3 | others         |
+--------------------+----------+--------------+----------------+
SELECT b.name,
       c.category,
       b.review_count,
       CASE
       WHEN stars<=3 and stars>=2 THEN "2-3"
       WHEN stars<=5 and stars>=4 THEN "4-5"
       ELSE "others"
       END stars_category
FROM business b
JOIN category c
ON b.id=c.business_id
WHERE city="Toronto" and category="Food"
ORDER BY stars_category
--iii. Are you able to infer anything from the location data provided between these two groups? Explain.
--ALL of restaurant are pretty close to each other. Therefore, there is no relationship between the location and stars.
+--------------------+----------+----------+-----------+----------------+
| name               | category | latitude | longitude | stars_category |
+--------------------+----------+----------+-----------+----------------+
| Loblaws            | Food     |  43.6551 |  -79.4494 | 2-3            |
| Cabin Fever        | Food     |  43.6553 |  -79.4567 | 4-5            |
| Halo Brewery       | Food     |  43.6618 |  -79.4466 | 4-5            |
| The Kosher Gourmet | Food     |  43.7175 |  -79.4291 | others         |
+--------------------+----------+----------+-----------+----------------+
SELECT b.name,
       c.category,
       b.latitude,
       b.longitude,
       CASE
       WHEN stars<=3 and stars>=2 THEN "2-3"
       WHEN stars<=5 and stars>=4 THEN "4-5"
       ELSE "others"
       END stars_category
FROM business b
JOIN category c
ON b.id=c.business_id
WHERE city="Toronto" and category="Food"
ORDER BY stars_category

--2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.

--i. Difference 1:
--Restaurants that are still open tend to have higher average number of reviews.
--ii. Difference 2:
--Restaurants that are open have higher aveage stars rating.
--SQL code used for analysis:
SELECT AVG(review_count),
       AVG(stars)
FROM business
GROUP BY is_open


--3.i. Indicate the type of analysis you chose to do:
--Sentiment analysis. Is there any relationship between how stars user gave and positive words, such as "like", "enjoy", "love"?

--ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
--In order to test this, I need to use case statement to divide comments into 2 categories.
--First is that contains "like", "enjoy", "love", another is that does not contain these words.
--Then, I need to group by these 2 categories. Finally, I need to calculate the average stars in these 2 categories.
iii. Output of your finished dataset:
+-------+---------------+---------------------------+
| stars |    AVG(stars) | sentiment_analysis        |
+-------+---------------+---------------------------+
|     5 | 3.66281344478 | IDK                       |
|     3 | 3.76650673978 | tend_to_give_higher_stars |
+-------+---------------+---------------------------+
iv. Provide the SQL code you used to create your final dataset:
SELECT stars,
       AVG(stars),
       CASE
       WHEN text like"%like%"
            OR text like"%love%"
            OR text like"%enjoy%"
       THEN "tend_to_give_higher_stars"
       ELSE "IDK"
       END sentiment_analysis
FROM review
GROUP BY sentiment_analysis
